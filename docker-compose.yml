services:
  # Database reset service - runs on every deployment to recreate DB
  db-reset:
    image: 'postgres:15-alpine'
    environment:
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'REACT_APP_SOCIAL_GITHUB=${REACT_APP_SOCIAL_GITHUB}'
      - 'REACT_APP_SOCIAL_LINKEDIN=${REACT_APP_SOCIAL_LINKEDIN}'
      - 'REACT_APP_SOCIAL_TELEGRAM=${REACT_APP_SOCIAL_TELEGRAM}'
      - 'SERVICE_FQDN_WEB=${SERVICE_FQDN_WEB}'
    volumes:
      - './reset-db.sh:/app/reset-db.sh:ro'
      - './reset-database.sql:/app/reset-database.sql:ro'
    command: ["/bin/sh", "/app/reset-db.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  web:
    build:
      context: .
      args:
        - 'REACT_APP_API_URL=${SERVICE_FQDN_BACKEND}/api'
        - 'REACT_APP_SITE_URL=${SERVICE_FQDN_WEB}'
        - 'REACT_APP_STRIPE_PUBLISHABLE_KEY=${REACT_APP_STRIPE_PUBLISHABLE_KEY}'
        - 'REACT_APP_GOOGLE_ANALYTICS_ID=${REACT_APP_GOOGLE_ANALYTICS_ID}'
        - 'REACT_APP_SOCIAL_TELEGRAM=${REACT_APP_SOCIAL_TELEGRAM}'
        - 'REACT_APP_SOCIAL_GITHUB=${REACT_APP_SOCIAL_GITHUB}'
        - 'REACT_APP_SOCIAL_LINKEDIN=${REACT_APP_SOCIAL_LINKEDIN}'
    environment:
      - SERVICE_FQDN_WEB_80
    depends_on:
      postgres:
        condition: service_healthy
      db-reset:
        condition: service_completed_successfully
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://127.0.0.1:80/health || exit 1'
      interval: 10s
      timeout: 20s
      retries: 10

  backend:
    build: ./backend
    environment:
      - SERVICE_FQDN_BACKEND_3001
      - 'DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
      - 'POSTGRES_HOST=postgres'
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_PORT=5432'
      - 'JWT_SECRET=${JWT_SECRET}'
      - 'BACKEND_PORT=3001'
      - 'FRONTEND_URL=${SERVICE_FQDN_WEB}'
      - 'STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}'
      - 'STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}'
      - 'EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}'
      - 'SMTP_HOST=${SMTP_HOST}'
      - 'SMTP_PORT=${SMTP_PORT}'
      - 'SMTP_SECURE=${SMTP_SECURE}'
      - 'SMTP_USER=${SMTP_USER}'
      - 'SMTP_PASS=${SMTP_PASS}'
      - 'GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}'
    depends_on:
      postgres:
        condition: service_healthy
      db-reset:
        condition: service_completed_successfully
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://127.0.0.1:3001/api/health || exit 1'
      interval: 10s
      timeout: 20s
      retries: 10

  postgres:
    image: 'postgres:15-alpine'
    environment:
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    ports:
      - "5433:5432"
    volumes:
      - 'iacovici_postgresql_data_v2:/var/lib/postgresql/data'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
      interval: 5s
      timeout: 20s
      retries: 10

volumes:
  iacovici_postgresql_data_v2: